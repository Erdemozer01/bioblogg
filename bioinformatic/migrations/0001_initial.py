# Generated by Django 5.0.6 on 2024-06-14 08:44

import bioinformatic.models.bioinformatic
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ArticleSearchModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=1000, verbose_name='Başlık')),
                ('article_id', models.CharField(max_length=100, verbose_name='Makale ID')),
                ('pub_date', models.CharField(max_length=100, verbose_name='Yayınlanma Tarihi')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Kullanıcı')),
            ],
            options={
                'verbose_name': 'Güncel Makale Arama',
                'verbose_name_plural': 'Güncel Makale Arama',
                'db_table': 'articles',
            },
        ),
        migrations.CreateModel(
            name='BioinformaticModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tool', models.CharField(blank=True, max_length=100, verbose_name='İşlem')),
                ('reading_file_format', models.CharField(blank=True, choices=[('abi', 'ABİ'), ('abi-trim', 'ABI-TRIM'), ('ace', 'ACE'), ('cif-atom', 'CIF-ATOM'), ('cif-seqres', 'CIF-SEQRES'), ('clustal', 'CLUSTAL'), ('embl', 'EMBL'), ('embl-cds', 'EMBL-CDS'), ('fasta', 'FASTA'), ('fastq', 'FASTQ'), ('fasta-2line', 'FASTA-2LINE'), ('fastq-sanger', 'FASTQ-SANGER'), ('fastq-solexa', 'FASTQ-SOLEXA'), ('fastq-illumina', 'FASTQ-ILLUMINA'), ('genbank', 'GENBANK'), ('gck', 'GCK'), ('ig', 'IG'), ('imgt', 'IMGT'), ('nib', 'NIB'), ('nexus', 'NEXUS'), ('pdb-atom', 'PDB-ATOM'), ('pdb-seqres', 'PDB-SEQRES'), ('phd', 'PHD'), ('phylip', 'PHYLIP'), ('pir', 'PIR'), ('qual', 'QUAL'), ('seqxml', 'SEQXML'), ('sff', 'SFF'), ('sff-trim', 'SFF-TRIM'), ('snapgene', 'SNAPGENE'), ('stockholm', 'STOCKHOLM'), ('swiss', 'SWISS'), ('tab', 'TAB'), ('qual', 'QUAL'), ('twobit', 'TWOBIT'), ('uniprot-xml', 'UNIPROT-XML'), ('xdna', 'XDNA')], max_length=100, verbose_name='Dosya Okuma Formatı')),
                ('writing_file_format', models.CharField(blank=True, choices=[('clustal', 'CLUSTAL'), ('embl', 'EMBL'), ('fasta', 'FASTA'), ('fastq', 'FASTQ'), ('fasta-2line', 'FASTA-2LINE'), ('fastq-sanger', 'FASTQ-SANGER'), ('fastq-solexa', 'FASTQ-SOLEXA'), ('fastq-illumina', 'FASTQ-ILLUMINA'), ('gb', 'GENBANK (.gb) '), ('genbank', 'GENBANK (.genbank)'), ('imgt', 'IMGT'), ('nexus', 'NEXUS'), ('phd', 'PHD'), ('phylip', 'PHYLIP'), ('pir', 'PIR'), ('seqxml', 'SEQXML'), ('sff', 'SFF'), ('stockholm', 'STOCKHOLM'), ('tab', 'TAB'), ('qual', 'QUAL'), ('xdna', 'XDNA')], max_length=100, verbose_name='Dosya Yazdırma Formatı')),
                ('molecule', models.CharField(blank=True, choices=[('', '------------'), ('DNA', 'DNA'), ('RNA', 'RNA'), ('protein', 'PROTEİN')], max_length=100, verbose_name='Molekül')),
                ('trans_table', models.CharField(blank=True, choices=[('', '------------'), ('1', 'Standart Kod'), ('2', 'Omurgalı Mitokondri Kodu'), ('3', 'Maya Mitokondri Kodu'), ('4', 'Küf, Protozoon ve Kölenterat Mitokondri Kodu ve Mikoplazma/Spiroplasma Kodu'), ('5', 'Omurgasız Mitokondri Kodu'), ('6', 'Siliat, Dasikladas ve Heksamita Nükleer Kodu'), ('9', 'Ekinoderm ve Yassı Solucan Mitokondri Kodu'), ('10', 'Euplotid Nükleer Kodu'), ('11', 'Bakteriyel, Arkeal ve Bitki Plastid Kodu, prokaryotik virüsler'), ('12', 'Alternatif Maya Nükleer Kodu'), ('13', 'Ascidian Mitokondri Kodu'), ('14', 'Alternatif Yassı Solucan Mitokondri Kodu'), ('16', 'Klorofis Mitokondri Kodu'), ('21', 'Trematod Mitokondriyal Kodu'), ('22', 'Scenedesmus obliquus Mitokondri Kodu'), ('23', 'Thraustochytrium Mitokondri Kodu'), ('24', 'Rhabdopleuridae Mitokondri Kodu'), ('25', 'Aday Bölüm SR1 ve Gracilibacteria Kodu'), ('26', 'Pachysolen tannophilus Nükleer Kodu'), ('27', 'Karyorelict Nükleer Kodu'), ('28', 'Kondilostoma Nükleer Kodu'), ('29', 'Mezodinyum Nükleer Kodu'), ('30', 'Peritrich Nükleer Kodu'), ('31', 'Blastocrithidia Nükleer Kodu'), ('33', 'Cephalodiscidae Mitokondriyal UAA-Tyr Kodu')], max_length=100, verbose_name='Dönüşüm Tablosu')),
                ('to_stop', models.BooleanField(default=False, verbose_name='Stop kodonları dahil et.')),
                ('db_name', models.CharField(blank=True, max_length=100, verbose_name='Veri Tabanı Adı')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='İşlemi yapan')),
            ],
            options={
                'verbose_name': 'Biyoinformatik',
                'verbose_name_plural': 'Biyoinformatik',
            },
        ),
        migrations.CreateModel(
            name='FileModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, help_text='Not : Max. dosya boyutu 5mb olmalıdır.', upload_to=bioinformatic.models.bioinformatic.file_upload_to, verbose_name='Dosya')),
                ('records', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='records_files', to='bioinformatic.bioinformaticmodel')),
            ],
            options={
                'verbose_name': 'Dosya',
                'verbose_name_plural': 'Dosyalar',
            },
        ),
        migrations.CreateModel(
            name='RecordModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('molecule', models.CharField(blank=True, max_length=100, verbose_name='Molekül')),
                ('molecule_id', models.CharField(blank=True, max_length=100, verbose_name='Molekül İD')),
                ('name', models.CharField(blank=True, max_length=100)),
                ('description', models.CharField(blank=True, max_length=100)),
                ('taxonomy', models.CharField(blank=True, max_length=100)),
                ('annotations', models.CharField(blank=True, max_length=100)),
                ('letter_annotations', models.CharField(blank=True, max_length=100, null=True)),
                ('db_xrefs', models.CharField(blank=True, max_length=100, null=True)),
                ('features', models.TextField(blank=True, null=True)),
                ('gene', models.CharField(blank=True, max_length=100, null=True)),
                ('accession', models.CharField(blank=True, max_length=100, null=True)),
                ('keywords', models.CharField(blank=True, max_length=100, null=True)),
                ('source', models.CharField(blank=True, max_length=100, null=True)),
                ('organism', models.CharField(blank=True, max_length=100, null=True)),
                ('sequence', models.TextField(blank=True, verbose_name='Sekans')),
                ('seq_len', models.IntegerField(blank=True, null=True, verbose_name='Sekans Uzunluğu')),
                ('protein_sequence', models.TextField(blank=True, verbose_name='Protein Sekans')),
                ('pro_seq_len', models.IntegerField(blank=True, null=True, verbose_name='PROTEİN SEKANS UZUNLUĞU')),
                ('gc', models.FloatField(blank=True, null=True, verbose_name='%GC')),
                ('records', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='record_content', to='bioinformatic.bioinformaticmodel')),
            ],
            options={
                'verbose_name': 'Biyoinformatik Kayıt',
                'verbose_name_plural': 'Biyoinformatik Kayıtlar',
            },
        ),
    ]
